---
description: api design doc
globs: api.md
alwaysApply: false
---
# API Specification Generation Rules

## Scope
- API specifications in the `docs/details/api.md` file

## Basic Rules
- When instructed with "Create the API specification", always refer to the `prd.md` file to review the requirements and specifications
- Based on the contents of `prd.md`, create the necessary API specifications in Markdown format in the `docs/details/api.md` file
- The API specification must be written at a level suitable for top-tier engineers, ensuring no omissions or ambiguities
- Follow RESTful design principles strictly (resource-oriented URIs, appropriate HTTP methods, clear status codes)

## Endpoint Documentation Requirements
For each endpoint, clearly describe:
- Purpose and usage scenarios
- Preconditions and assumptions
- Authentication/authorization requirements (e.g., OAuth, JWT, API key, role-based access)
- Side effects (data changes, external service calls, etc.)
- Versioning policy and deprecation handling if applicable
- Security requirements (CSRF/XSS protection, rate limiting, CORS, etc.)

## Parameter Documentation Requirements
For all parameters (path, query, header, body), specify:
- Type
- Required/optional
- Validation rules
- Constraints
- Default values
- Examples

## Endpoint Detailed Documentation
For each endpoint, provide:
- Request/response examples for both success and all relevant error cases (validation error, unauthorized, not found, etc.)
- List of possible error codes and error message formats, with explanations

## Consistency with Existing API Specifications
If there is an existing API specification, verify that there are no redundancies or contradictions, and add or modify as necessary

## Generation Source Attribution
All API specification creation and modifications must include the comment "Generated by Cursor"

## API Specification Template
API specifications must use the following Markdown template:

```markdown
# API Design

## Endpoint List

> (Example)
>
> ### User Related
> - `POST /users` - User Registration
> - `GET /users/{id}` - Get User Information
> - `PUT /users/{id}` - Update User Information
> - `DELETE /users/{id}` - Delete User

## Endpoint Details

### POST /users

- **Purpose**: User Registration
- **Usage Scenario**: New User Creation
- **Authentication/Authorization**: None
- **Preconditions**: Email address is not registered
- **Side Effects**: New user information creation
- **Version**: v1
- **Security**: CSRF protection required

#### Parameters
| Name     | Type   | Data Type | Required | Validation/Constraints     | Default | Example        |
|---------|--------|-----------|----------|---------------------------|---------|----------------|
| name    | body   | string    | Yes      | 1-50 characters, required | None    | "John Doe"     |
| email   | body   | string    | Yes      | Email format, required    | None    | "test@example.com" |
| password| body   | string    | Yes      | 8+ chars, alphanumeric    | None    | "Passw0rd"     |

#### Request Example
```json
{
  "name": "John Doe",
  "email": "test@example.com",
  "password": "Passw0rd"
}
```

#### Response Example (Success)
```json
{
  "id": "string",
  "name": "John Doe",
  "email": "test@example.com"
}
```

#### Response Example (Validation Error)
```json
{
  "error": {
    "code": "VALIDATION_ERROR",
    "message": "Invalid email format."
  }
}
```

#### Response Example (Authorization Error)
```json
{
  "error": {
    "code": "UNAUTHORIZED",
    "message": "Authentication required."
  }
}
```

#### Error Code List
| Code              | Meaning                    |
|-------------------|----------------------------|
| VALIDATION_ERROR  | Invalid input             |
| UNAUTHORIZED      | Authentication error       |
| NOT_FOUND         | Resource does not exist    |
| INTERNAL_ERROR    | Server internal error      |
```
